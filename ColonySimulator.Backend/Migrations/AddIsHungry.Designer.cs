// <auto-generated />
using ColonySimulator.Backend.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ColonySimulator.Backend.Migrations
{
    [DbContext(typeof(ColonySimulatorContext))]
    [Migration("20240530135800_AddIsHungry")]
    partial class AddIsHungry
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Professions.Proffesion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Agility")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHungry")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSick")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RequiredAgility")
                        .HasColumnType("REAL");

                    b.Property<double>("RequiredStrength")
                        .HasColumnType("REAL");

                    b.Property<int>("ResourceConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Strength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Vitality")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Proffesions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Proffesion");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Resources.Crops", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CropsCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Resources.Herbs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HerbsCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Herbs");
                });

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Resources.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MedicineCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Resources.Weaponry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WeaponryCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Weaponry");
                });

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Resources.Wood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WoodCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Wood");
                });

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Threats.FightingThreat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RequiredSmithingLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredWeaponryCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ThreatLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FightingThreats");
                });

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Threats.NaturalThreat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RequiredCropsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredFarmingLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ThreatLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("NaturalThreats");
                });

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Threats.PlagueThreat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RequiredMedicalLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredMedicineCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ThreatLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PlagueThreats");
                });

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Professions.Apothecary", b =>
                {
                    b.HasBaseType("ColonySimulator.Backend.Persistence.Models.Professions.Proffesion");

                    b.Property<int>("ApothecaryLevel")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Apothecary");
                });

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Professions.BlackSmith", b =>
                {
                    b.HasBaseType("ColonySimulator.Backend.Persistence.Models.Professions.Proffesion");

                    b.Property<int>("BlackSmithLevel")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("BlackSmith");
                });

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Professions.Farmer", b =>
                {
                    b.HasBaseType("ColonySimulator.Backend.Persistence.Models.Professions.Proffesion");

                    b.Property<int>("FarmingLevel")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Farmer");
                });

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Professions.Medic", b =>
                {
                    b.HasBaseType("ColonySimulator.Backend.Persistence.Models.Professions.Proffesion");

                    b.Property<int>("MedicLevel")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Medic");
                });

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Professions.Timber", b =>
                {
                    b.HasBaseType("ColonySimulator.Backend.Persistence.Models.Professions.Proffesion");

                    b.Property<int>("TimberLevel")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Timber");
                });

            modelBuilder.Entity("ColonySimulator.Backend.Persistence.Models.Professions.Trader", b =>
                {
                    b.HasBaseType("ColonySimulator.Backend.Persistence.Models.Professions.Proffesion");

                    b.Property<int>("TradingLevel")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Trader");
                });
#pragma warning restore 612, 618
        }
    }
}
